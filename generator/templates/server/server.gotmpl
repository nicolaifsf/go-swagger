package {{ .APIPackage }}

import (
	"crypto/tls"
	"fmt"
	"log"
	"net"
	"net/http"
	"time"

	flags "github.com/jessevdk/go-flags"
	graceful "github.com/tylerb/graceful"

  {{ range $key, $value := .DefaultImports }}{{ printf "%s %q" $key $value }}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

// NewServer creates a new api {{ humanize .Name }} server but does not configure it
func NewServer(api *{{ .Package }}.{{ pascalize .Name }}API) *Server {
	s := new(Server)
	s.api = api
	return s
}

// ConfigureAPI configures the API and handlers. Needs to be called before Serve
func (s *Server) ConfigureAPI() {
    if s.api != nil {
        s.handler = configureAPI(s.api)
    }
}

// ConfigureFlags configures the additional flags defined by the handlers. Needs to be called before the parser.Parse
func (s *Server) ConfigureFlags() {
    if s.api != nil {
       configureFlags(s.api)
    }
}

// Server for the {{ humanize .Name }} API
type Server struct {
	ForcedSchemes []string `long:"override-scheme" choice:"http" choice:"https" choice:"wss" description:"Override schemes defined in the swagger spec."`

	SocketPath    flags.Filename `long:"unix-socket" description:"the unix socket to listen on"`
	HTTPServer    string `long:"http-server" description:"Host:Port for HTTP Server"`

	HTTPSServer   string `long:"https-server" description:"Host:Port for HTTPS Server"`
	HTTPSCert     flags.Filename `long:"https-tls-cert" description:"the certificate to use for secure connections"`
	HTTPSKey      flags.Filename `long:"https-tls-key" description:"the private key to use for secure connections"`

	domainSocketL net.Listener
	{{ end }}{{ if (hasInsecure .Schemes) }}
	Host        string `long:"host" description:"the IP to listen on" default:"localhost" env:"HOST"`
	Port        int    `long:"port" description:"the port to listen on for insecure connections, defaults to a random value" env:"PORT"`
  KeepAlive   time.Duration `long:"keep-alive" description:"how long to keep tcp connections alive, put to 0 to disable (not recommended)" default:"3m"`
	httpServerL net.Listener{{ end }}{{ if (hasSecure .Schemes) }}

	TLSHost           string         `long:"tls-host" description:"the IP to listen on for tls, when not specified it's the same as --host" env:"TLS_HOST"`
	TLSPort           int            `long:"tls-port" description:"the port to listen on for secure connections, defaults to a random value" env:"TLS_PORT"`
	TLSCertificate    flags.Filename `long:"tls-certificate" description:"the certificate to use for secure connections" required:"true" env:"TLS_CERTIFICATE"`
	TLSCertificateKey flags.Filename `long:"tls-key" description:"the private key to use for secure conections" required:"true" env:"TLS_PRIVATE_KEY"`
  TLSKeepAlive      time.Duration  `long:"keep-alive" description:"how long to keep tcp connections alive, put to 0 to disable (not recommended)" default:"3m"`
	httpsServerL      net.Listener{{ end }}

	{{ if .ExcludeSpec }}Spec flags.Filename `long:"spec" description:"the swagger specification to serve"`{{ end }}
	api               *{{ .Package }}.{{ pascalize .Name }}API
	handler           http.Handler
	hasListeners bool
}

// Logf logs message either via defined user logger or via system one if no user logger is defined.
func (s *Server) Logf(f string, args ...interface{}) {
	if s.api != nil && s.api.Logger != nil {
		s.api.Logger(f, args...)
	} else {
		log.Printf(f, args...)
	}
}

// SetAPI configures the server with the specified API. Needs to be called before Serve
func (s *Server) SetAPI(api *{{ .Package }}.{{ pascalize .Name }}API) {
	if api == nil {
		s.api = nil
		s.handler = nil
		return
	}

	s.api = api
	s.api.Logger = log.Printf
	s.handler = configureAPI(api)
}

// Serve the api
<<<<<<< 12fc19f86ae5341a36781e332138cf1d0f372d6e
func (s *Server) Serve() error {
	var wg sync.WaitGroup
=======
func (s *Server) Serve() (err error) {
  if !s.hasListeners {
    if err := s.Listen(); err != nil {
      return err
    }
  }
	{{ if (contains .ExtraSchemes "unix") }}
  domainSocket := &graceful.Server{Server: new(http.Server)}
  domainSocket.SetKeepAlivesEnabled(false)
  domainSocket.Handler = s.handler

  s.Logf("Serving {{ humanize .Name }} at unix://%s", s.SocketPath)
  {{ if or (hasInsecure .Schemes) (hasSecure .Schemes) }}go func(l net.Listener){
  {{ end }}if err := domainSocket.Serve(l); err != nil {
      {{ if or (hasInsecure .Schemes) (hasSecure .Schemes) }}log.Fatalln(err){{ else }}return err{{ end }}
    }
  {{ if or (hasInsecure .Schemes) (hasSecure .Schemes) }}}(s.domainSocketL){{ end }}
  {{ end }}{{ if (hasInsecure .Schemes) }}
	httpServer := &graceful.Server{Server: new(http.Server)}
  if s.KeepAlive > 0 {
    httpServer.SetKeepAlivesEnabled(true)
    httpServer.TCPKeepAlive = s.KeepAlive
  } else {
    httpServer.SetKeepAlivesEnabled(false)
  }
	httpServer.Handler = s.handler

	s.Logf("Serving {{ humanize .Name }} at http://%s", s.httpServerL.Addr())
  {{ if (hasSecure .Schemes) }}go func(l net.Listener) {
  {{ else }}l := s.httpServerL
		{{ end }}if err := httpServer.Serve(tcpKeepAliveListener{l.(*net.TCPListener)}); err != nil {
			{{ if (hasSecure .Schemes) }}log.Fatalln(err){{ else }}return err{{ end }}
		}
  {{ if (hasSecure .Schemes) }}}(s.httpServerL){{ end }}
{{ end }}{{ if (hasSecure .Schemes) }}
	httpsServer := &graceful.Server{Server: new(http.Server)}
  if s.TLSKeepAlive > 0 {
    httpsServer.SetKeepAlivesEnabled(true)
    httpsServer.TCPKeepAlive = s.TLSKeepAlive
  } else {
    httpsServer.SetKeepAlivesEnabled(false)
  }
	httpsServer.Handler = s.handler
	httpsServer.TLSConfig = new(tls.Config)
	httpsServer.TLSConfig.NextProtos = []string{"http/1.1"}
	// https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet#Rule_-_Only_Support_Strong_Protocols
	httpsServer.TLSConfig.MinVersion = tls.VersionTLS11
	httpsServer.TLSConfig.Certificates = make([]tls.Certificate, 1)
	httpsServer.TLSConfig.Certificates[0], err = tls.LoadX509KeyPair(string(s.TLSCertificate), string(s.TLSCertificateKey))

	configureTLS(httpsServer.TLSConfig)
>>>>>>> [wip] add a single custom serializer for all possible use cases

	if s.HTTPServer == "" && s.HTTPSServer == "" && s.SocketPath == "" {
		return errors.New("At least one listening server have to be defined")
	}

	if s.HTTPServer != "" {
		listener, err := net.Listen("tcp", s.HTTPServer)
		if err != nil {
			return err
		}

		s.httpServerL = listener

		httpServer := &graceful.Server{Server: new(http.Server)}
		httpServer.Handler = s.handler
		wg.Add(1)
		go func(l net.Listener) {
			defer wg.Done()
			s.Logf("Serving rdb at http://%s", s.httpServerL.Addr())
			if err := httpServer.Serve(tcpKeepAliveListener{l.(*net.TCPListener)}); err != nil {
				log.Fatalln(err)
			}
		}(s.httpServerL)
	}

	if s.HTTPSServer != "" {
		tlsListener, err := net.Listen("tcp", s.HTTPSServer)
		if err != nil {
			return err
		}
		s.httpsServerL = tlsListener

		if s.HTTPSCert == "" {
			return errors.New("TLS Certificate is not provided for HTTPS")
		}
		if s.HTTPSKey == "" {
			return errors.New("TLS Key is not provided for HTTPS")
		}
		httpsServer := &graceful.Server{Server: new(http.Server)}
		httpsServer.Handler = s.handler
		httpsServer.TLSConfig = new(tls.Config)
		httpsServer.TLSConfig.NextProtos = []string{"http/1.1"}

		// https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet#Rule_-_Only_Support_Strong_Protocols
		httpsServer.TLSConfig.MinVersion = tls.VersionTLS12
		httpsServer.TLSConfig.Certificates = make([]tls.Certificate, 1)
		httpsServer.TLSConfig.Certificates[0], err = tls.LoadX509KeyPair(string(s.HTTPSCert), string(s.HTTPSKey))

		configureTLS(httpsServer.TLSConfig)
		wg.Add(1)
		go func(l net.Listener) {
			defer wg.Done()
			s.Logf("Serving rdb at http://%s", s.httpsServerL.Addr())
			if err := httpsServer.Serve(tcpKeepAliveListener{l.(*net.TCPListener)}); err != nil {
				log.Fatalln(err)
			}
		}(s.httpsServerL)
	}

	if s.SocketPath != "" {
		domSockListener, err := net.Listen("unix", string(s.SocketPath))
		if err != nil {
			return err
		}
		s.domainSocketL = domSockListener

		domainSocket := &graceful.Server{Server: new(http.Server)}
		domainSocket.Handler = s.handler
		wg.Add(1)
		go func(l net.Listener) {
			defer wg.Done()
			s.Logf("Serving rdb at unix://%s", s.SocketPath)
			if err := domainSocket.Serve(l); err != nil {
				log.Fatalln(err)
			}
		}(s.domainSocketL)
	}

	wg.Wait()
	return nil
}

// Shutdown server and clean up resources
func (s *Server) Shutdown() error {
	s.api.ServerShutdown()
	return nil
}
